server:
  shutdown: graceful
  tomcat:
    threads:
      max: 200 # 최대 워커 스레드 수 (default : 200)
      min-spare: 10 # 최소 유지 스레드 수 (default : 10)
    connection-timeout: 1m # 연결 타임아웃 (ms) (default : 60000ms = 1m)
    max-connections: 8192 # 최대 동시 연결 수 (default : 8192)
    accept-count: 100 # 대기 큐 크기 (default : 100)
    keep-alive-timeout: 60s # 60s
  max-http-request-header-size: 8KB

spring:
  main:
    web-application-type: servlet
  application:
    name: commerce-api
  profiles:
    active: local
  config:
    import:
      - jpa.yml
      - redis.yml
      - kafka.yml
      - logging.yml
      - monitoring.yml

springdoc:
  use-fqn: true
  swagger-ui:
    path: /swagger-ui.html

resilience4j:
  circuitbreaker:
    instances:
      pgCircuit:
        failure-rate-threshold: 50                                # 50% 실패율 초과시 차단
        slow-call-rate-threshold: 50                              # 50% 느린 호출 초과시 차단
        slow-call-duration-threshold: 5000                        # 5초 초과시 느린 호출로 판정
        
        wait-duration-in-open-state: 20000                        # 20초간 차단 후 Half-Open 상태로 전환
        permitted-number-of-calls-in-half-open-state: 2           # Half-Open에서 2번만 테스트
        automatic-transition-from-open-to-half-open-enabled: true
        
        sliding-window-type: count_based                          # 개수 기반 슬라이딩 윈도우
        sliding-window-size: 10                                   # 최근 10개 호출 기준으로 판단
        minimum-number-of-calls: 5                                # 최소 5번 호출 후 통계 계산
        
        record-exceptions:
          - feign.FeignException                                  # Feign 관련 예외
          - java.net.SocketTimeoutException                       # 네트워크 타임아웃
          - java.net.ConnectException                             # 연결 실패
          - feign.RetryableException                              # 재시도 가능한 예외
          - com.loopers.support.error.CoreException               # 내부 시스템 예외
        ignore-exceptions:
          - java.lang.IllegalArgumentException                    # 파라미터 검증 실패는 무시

  retry:
    instances:
      pgRetry:
        # 재시도 횟수 및 대기 시간
        max-attempts: 3                                           # 최대 3회 시도 (2회 재시도) - PG 시스템 일시적 장애 고려
        wait-duration: 1000                                       # 1초 대기 후 재시도 (PG 시스템 회복 시간 고려)
        exponential-backoff-multiplier: 1.5                       # 지수적 백오프 (1000ms -> 1500ms -> 2250ms)
        
        # 재시도할 예외 지정 (구체적으로 명시)
        retry-exceptions:
          - java.net.SocketTimeoutException                        # 네트워크 타임아웃 (일시적 지연)
          - java.net.ConnectException                              # 연결 실패 (일시적 네트워크 장애)
          - feign.RetryableException                               # Feign에서 재시도 가능하다고 판단한 예외
          - java.util.concurrent.TimeoutException                  # 타임아웃 예외
          - feign.FeignException                                   # Feign 관련 예외 (500 에러 포함)
          
        # 재시도하지 않을 예외 지정
        ignore-exceptions:
          - com.loopers.support.error.CoreException                # 비즈니스 로직 예외 (재시도 무의미)

datasource:
  mysql-jpa:
    main:
      jdbc-url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/loopers
      username: ${MYSQL_USER:application}
      password: "${MYSQL_PWD:application}"
  redis:
    database: 0
    master:
      host: ${REDIS_MASTER_HOST:localhost}
      port: ${REDIS_MASTER_PORT:6379}
    replicas:
      - host: ${REDIS_REPLICA_HOST:localhost}
        port: ${REDIS_REPLICA_PORT:6380}

scheduler:
  payment:
    batch-size: 50
    check-delay-minutes: 1
    max-delay-minutes: 10

---
spring:
  config:
    activate:
      on-profile: local, test

---
spring:
  config:
    activate:
      on-profile: dev

---
spring:
  config:
    activate:
      on-profile: qa

---
spring:
  config:
    activate:
      on-profile: prd

springdoc:
  api-docs:
    enabled: false

---
spring.config.activate.on-profile: docker

datasource:
  mysql-jpa:
    main:
      jdbc-url: jdbc:mysql://mysql:3306/loopers
      username: application
      password: application

  redis:
    master:
      host: redis-master
      port: 6379
    replicas:
      - host: redis-readonly
        port: 6379